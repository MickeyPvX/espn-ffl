name: Release

on:
  push:
    tags:
      - 'v*' # Triggers on tags like v1.0.0, v1.1.0, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate tag matches Cargo.toml version
        run: |
          # Extract version from Cargo.toml
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')

          # Extract version from git tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF_NAME#v}

          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Git tag version: $TAG_VERSION"

          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Cargo.toml version: $CARGO_VERSION"
            echo "Git tag version: $TAG_VERSION"
            exit 1
          fi

          echo "✅ Versions match!"

  create-release:
    needs: validate-version
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in ${{ github.ref_name }}

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md) for details.

            ## Installation

            Download the appropriate binary for your platform below, or build from source:
            ```bash
            cargo install --git https://github.com/${{ github.repository }} --tag ${{ github.ref_name }}
            ```
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: espn-ffl-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: espn-ffl-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: espn-ffl-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: espn-ffl-windows-x86_64.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/espn-ffl ${{ matrix.name }}
          chmod +x ${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/espn-ffl.exe ${{ matrix.name }}

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream